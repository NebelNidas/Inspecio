plugins {
	id 'fabric-loom' version '0.12.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.+'
	id 'java-library'
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'com.modrinth.minotaur' version '2.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/Queerbric/Inspecio/1.17/$2)')
	return readme
}

repositories {
	maven {
		name 'QuiltSnapshot'
		url 'https://maven.quiltmc.org/repository/snapshot'
	}
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include modImplementation(fabricApi.module('fabric-command-api-v1', project.fabric_api_version))
	include modImplementation(fabricApi.module('fabric-rendering-v1', project.fabric_api_version))
	include modImplementation(fabricApi.module('fabric-resource-loader-v0', project.fabric_api_version))

	// Only for ModMenu
	modLocalRuntime fabricApi.module('fabric-screen-api-v1', project.fabric_api_version)
	modLocalRuntime("com.terraformersmc:modmenu:3.1.0") {
		transitive = false
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

modrinth {
	projectId = project.modrinth_id
	versionName = "Inspecio ${project.mod_version} (${getMCVersionString()})"
	gameVersions = [project.minecraft_version]
	loaders = ["fabric"]
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	uploadFile = tasks.remapJar
	syncBodyFrom = parseReadme()

	// Changelog fetching
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}