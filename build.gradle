plugins {
	id 'fabric-loom' version '0.12.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.0'
	id 'java-library'
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'com.modrinth.minotaur' version '2.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/ReviversMC/advanced-tooltips/1.19/$2)')
	return readme
}

repositories {
    if (project.use_third_party_mods == "true") {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	})
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Required Fabric API modules
	modImplementation(fabricApi.module('fabric-api-base', project.fabric_api_version))
	modImplementation(fabricApi.module('fabric-command-api-v2', project.fabric_api_version))
	modImplementation(fabricApi.module('fabric-rendering-v1', project.fabric_api_version))
	modImplementation(fabricApi.module('fabric-resource-loader-v0', project.fabric_api_version))

    // Use the full Fabric API while debugging, otherwise ModMenu complains
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // ModMenu integration
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    // Cloth Config for config screen
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }


    if (project.use_third_party_mods == "true") {
        configurations {
			modRuntimeOnly {
                transitive = true
                exclude module: "fabric-loader"
                exclude module: "fabric-api-base"
                exclude module: "fabric-command-api-v2"
                exclude module: "fabric-rendering-v1"
                exclude module: "fabric-resource-loader-v0"
            }
        }

        modRuntimeOnly "maven.modrinth:lazydfu:${project.lazydfu_version}"
        modRuntimeOnly "maven.modrinth:sodium:${project.sodium_version}"
        runtimeOnly "org.joml:joml:${project.joml_version}"
        // modRuntimeOnly "maven.modrinth:lithium:${project.lithium_version}"
        modRuntimeOnly "maven.modrinth:starlight:${project.starlight_version}"
        modRuntimeOnly "maven.modrinth:smoothboot-fabric:${project.smoothboot_version}"
        modRuntimeOnly "curse.maven:no-fade-452768:${project.no_fade_version}"
    }
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}
